import logging
import datetime
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# üîë –¢–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = "8333327080:AAEvHh6iWjg1LiSFKPsoxXMbC8k-UXOiT68"

# –°–º–µ—à–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
FUNNY_IMAGE = "https://disk.yandex.ru/i/OCg6p12zaV_3Lg"

# –ö–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è /baby
BABY_IMAGES = [
    "https://disk.yandex.ru/i/lA_mVdPimm-F8Q",
    "https://disk.yandex.ru/i/noQR8UEWMNTRxw",
]

# ===== –ö–æ–º–∞–Ω–¥—ã =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    if chat_id not in context.application.chat_data:
        context.application.chat_data[chat_id] = {"exam_date": None}
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n\n"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π:\n"
        "‚Ä¢ –∑–∞ 3 –¥–Ω—è\n‚Ä¢ –∑–∞ 1 –¥–µ–Ω—å\n‚Ä¢ –≤ –¥–µ–Ω—å –•\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n/help ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
        "/start ‚Äì –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n"
        "/setdate YYYY-MM-DD ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π\n"
        "/when ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –∏ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å\n"
        "/baby ‚Äì \n"
        "/help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
    await update.message.reply_text(text)

async def set_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /setdate YYYY-MM-DD")
        return

    try:
        exam_date = datetime.datetime.strptime(context.args[0], "%Y-%m-%d").date()
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-09-20)")
        return

    old_date = context.chat_data.get("exam_date")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ chat_data
    context.chat_data["exam_date"] = exam_date

    if old_date:
        await update.message.reply_text(
            f"üîÑ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –±—ã–ª–∞ {old_date.strftime('%d.%m.%Y')}, —Ç–µ–ø–µ—Ä—å {exam_date.strftime('%d.%m.%Y')}"
        )
    else:
        await update.message.reply_text(f"‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {exam_date.strftime('%d.%m.%Y')}")


async def when(update: Update, context: ContextTypes.DEFAULT_TYPE):
    exam_date = context.chat_data.get("exam_date")

    if not exam_date:
        await update.message.reply_text("‚ùå –î–∞—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í–≤–µ–¥–∏: /setdate YYYY-MM-DD")
        return

    days_left = (exam_date - datetime.date.today()).days
    if days_left > 0:
        await update.message.reply_text(f"üìÖ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {exam_date.strftime('%d.%m.%Y')}.\n"
                                        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.")
    elif days_left == 0:
        await update.message.reply_text(f"üî• –°–µ–≥–æ–¥–Ω—è ({exam_date.strftime('%d.%m.%Y')}) –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è!")
    else:
        await update.message.reply_text(f"‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —É–∂–µ –ø—Ä–æ—à–ª–∞ ({exam_date.strftime('%d.%m.%Y')}).")


async def baby(update: Update, context: ContextTypes.DEFAULT_TYPE):
    img = random.choice(BABY_IMAGES)
    await update.message.reply_photo(img, caption="–í–æ—Ç —Ç–µ–±–µ /baby")

# ===== –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ =====
async def daily_check(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.date.today()

    for chat_id, data in context.application.chat_data.items():
        exam_date = data.get("exam_date")
        if not exam_date:
            continue

        days_left = (exam_date - today).days

        if days_left in [3, 1, 0]:
            if days_left == 3:
                text = "üö® –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è! –ì–æ—Ç–æ–≤—å—Å—è üíÄüìö"
            elif days_left == 1:
                text = "‚ö° –ó–∞–≤—Ç—Ä–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è! –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å üò±üìñ"
            elif days_left == 0:
                text = "üî• –°–µ–≥–æ–¥–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è! –£–¥–∞—á–∏, —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è ‚ú®‚úçÔ∏è"

            await context.bot.send_photo(chat_id, FUNNY_IMAGE, caption=text)

# ===== –ó–∞–ø—É—Å–∫ =====
def main():
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("setdate", set_date))
    app.add_handler(CommandHandler("when", when))
    app.add_handler(CommandHandler("baby", baby))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00)
    app.job_queue.run_daily(daily_check, time=datetime.time(hour=10, minute=0))

    app.run_polling()

if __name__ == "__main__":
    main()
